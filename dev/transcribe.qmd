```py
# ruff: noqa: E402
```

## Process a single file

We process below the viral [demo](https://twitter.com/deepfates/status/1769963585503941068) of the potent [worldsim](https://twitter.com/karan4d/status/1768836844207378463).

```python
from catalog.workflow import Library
from catalog.media import Video
library = Library()

file_path = "data/samples/worldsim.mp4"
file = library.import_media_object(file_path, Video)
print(file.get_details())

```


```py
from catalog.process import transcribe

prompt="Glossary: ChatGPT, OpenAI, Claude 3, Anthropic, worldsim, Command Loom Interface"
transcribe(file, batch_size=4, initial_prompt=prompt)
transcript_data = file.transcripts[0]
```


### Format

```python
import re
def format_transcript(transcript_data, sensitivity=0.5, include_timestamps=True, timestamp_interval=120, timestamp_every_n_chunks=None):
    for segment in transcript_data['nodes']:
        segment['content'] = re.sub(r'^\s+', '', re.sub(r'\s+$', '', segment['content']))

    chunks = [segment['content'] for segment in transcript_data['nodes']]
    start_times = [segment['start'] for segment in transcript_data['nodes']]
    end_times = [segment['end'] for segment in transcript_data['nodes']]
    
    pauses = [start_times[i] - end_times[i-1] for i in range(1, len(start_times))]
    min_pause = min(pauses)
    max_pause = max(pauses)
    threshold = min_pause + (max_pause - min_pause) * sensitivity
    
    result = "**00:00**\n\n"
    last_timestamp = 0
    chunk_counter = 0
    total_duration = end_times[-1]
    
    for i in range(len(chunks)):
        if include_timestamps:
            current_time = start_times[i]
            if (current_time - last_timestamp >= timestamp_interval) or (timestamp_every_n_chunks and chunk_counter % timestamp_every_n_chunks == 0):
                if not result.endswith("\n\n"):
                    result += "\n\n"
                if total_duration >= 3600:
                    timestamp = f"\n**{int(current_time // 3600):02d}:{int((current_time % 3600) // 60):02d}:{int(current_time % 60):02d}**\n\n"
                else:
                    timestamp = f"\n**{int(current_time // 60):02d}:{int(current_time % 60):02d}**\n\n"
                result += timestamp
                last_timestamp = current_time
        
        result += chunks[i]
        chunk_counter += 1
        
        if i < len(chunks) - 1:
            pause = start_times[i+1] - end_times[i]
            if pause < threshold:
                result += " "
            else:
                result += "\n\n"
    
    return result

text = format_transcript(transcript_data, sensitivity=0.10)
print(text)
```

