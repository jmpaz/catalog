```py
# ruff: noqa: E402
```

# Workflow: Transcribe

## 1. Ingest

Fetch audio files for processing

### Pixel
*assumes that a Google Takeout archive has been extracted into 'data/ingest/Takeout', eg with:*
```sh
tar --skip-old-files -xvzf ~/Downloads/takeout-[timestamp]-001.tgz -C data/ingest/
```

Retrieve audio files, evaluate timestamps, and copy to `{target_dir}/YYYY/YYYY-MM/YYYY-MM-DD`
```python
from utils.ingest import PixelExtractor

extractor = PixelExtractor(source_dir="data/ingest/Takeout/Recorder", target_dir="data/imports/Pixel")
extractor.process_directory(debug=False)
```


### iOS/Just Press Record

Connect to iCloud and sync directories to `data/imports`. Audio files are expected to be present in dated directories `YYYY-MM-DD/`
```python
from icloudpy import ICloudPyService

def read_secrets(filename="secrets.txt"):
    secrets = {}
    with open(filename, "r") as file:
        for line in file:
            key, value = line.strip().split("=", 1)
            secrets[key] = value
    return secrets

secrets = read_secrets()
api = ICloudPyService(secrets["icloud_username"], secrets["icloud_password"])

if api.requires_2fa:
    code = input("Enter the code you received on one of your approved devices to log in: ")
    result = api.validate_2fa_code(code)
    if not result:
        print("Failed to verify security code.")
    else:
        if not api.is_trusted_session:
            print("Session is not trusted. Requesting trust...")
            result = api.trust_session()
            if not result:
                print("Failed to request trust.")
else:
    print("Logged in.")
```

```py
from utils.ingest import iCloudExtractor

extractor = iCloudExtractor(api=api, base_path="Just Press Record", target_dir="data/imports/iCloud", debug=False)
extractor.process_source()
```


## 2. Process

Transcribe ingested files and store outputs in `outputs/processed`

### Single directory

Process all files in a single directory with `AudioHandler`
```python
from core.transcribe import Transcriber, to_lrc
from utils.file_handling import AudioHandler
from utils.logging import Logger
from rich.console import Console
import os

logger = Logger("logs/log.json")
console = Console()

# initialize an empty prompt and load from 'data/prompt.txt' if it exists
prompt = ""
if os.path.exists("data/prompt.txt"):
    with open("data/prompt.txt", "r") as file:
        prompt_text = file.read()

class TranscribeArgs:
    def __init__(self, **kwargs):
        for key, value in kwargs.items():
            setattr(self, key, value)

transcribe_args = TranscribeArgs(
    input_path="data/samples/oz",
    output="outputs/tests/transcribe_dir",
    # input_path="data/imports/iCloud/2023/2023-01/2023-01-10",
    # output="outputs/processed/2023-01-10",
    relocate_files=False,
    speaker_count=1,
    prompt=prompt,
    format="lrc",
    device_index=1,
    verbose=True
)

audio_handler = AudioHandler(transcribe_args, logger, console)
audio_handler.transcribe()
```



## 3. Export

```

```
