## Implementation

### Class definitions

```python
import os
from abc import ABC, abstractmethod

class Library:
    def __init__(self):
        self.media_objects = []

    def import_media_object(self, file_path, media_object_class):
        if issubclass(media_object_class, MediaObject):
            media_object = media_object_class(file_path)
            self.media_objects.append(media_object)
            return media_object
        else:
            raise ValueError("media_object_class must be a subclass of MediaObject")


class MediaObject(ABC):
    def __init__(self, file_path=None):
        self.file_path = file_path
        self.file_content = None
        if file_path:
            self.import_file(file_path)

    def import_file(self, file_path):
        if os.path.isfile(file_path):
            with open(file_path, 'rb') as file:
                self.file_content = file.read()
        else:
            raise FileNotFoundError(f"No file found at {file_path}")

    def get_details(self):
        import_path = self.file_path if self.file_path else None
        file_size = len(self.file_content) if self.file_content else 0
        return {
            "import_path": import_path,
            "file_size": file_size
        }

    @abstractmethod
    def process(self):
        pass


class Task(ABC):
    @abstractmethod
    def run(self, media_object):
        pass

class Job(ABC):
    def __init__(self):
        self.tasks = []

    def add_task(self, task):
        self.tasks.append(task)

    @abstractmethod
    def execute(self):
        pass

```


```py
class Audio(MediaObject):
    def process(self):
        print("Processing generic audio")

class Voice(Audio):
    def process(self):
        print("Processing voice")

class Music(Audio):
    def process(self):
        print("Processing music")

class Image(MediaObject):
    def process(self):
        print("Processing generic image")

class Screenshot(Image):
    def process(self):
        print("Processing screenshot")

class Art(Image):
    def process(self):
        print("Processing art")

class Photo(Image): # e.g. from camera roll
    def process(self):
        print("Processing photo")

```

### Workflow
```python
library = Library()
```


```python
sample_audio = library.import_media_object("data/samples/oz/01.ogg", Voice)
print(sample_audio.get_details())

sample_image = library.import_media_object("data/samples/screenshots/2024-03-01-09-05-22.png", Screenshot)
print(sample_image.get_details())

print(library.media_objects)
```

